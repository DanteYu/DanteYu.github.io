---
layout:     post
title:      Chakram学习笔记 (in progress)
subtitle:   
date:       2017-11-05 12:00:00
author:     DanteYu
tags:
    - chakram
    - APITesting
---

### 什么是Chakram

[Chakram](http://dareid.github.io/chakram/)可以让API testing更简单，它可以让你写出直接易懂的测试，保证JSON REST endpoints工作的正确性。暂不支持非JSON的数据格式。


`Chakram`是基于`node.js`、`mocha`和`chai`打造的，所以`Chakram`可以提供BDD式的测试风格和处理promises。

### Chakram的安装运行

`Chakram`的运行需要nodejs环境，通过`npm install --save-dev chakram`可以把`Chakram`作为development dependency加入到项目中。

`Mocha`用来运行`Chakram`测试，所以`Mocha`的各种功能都可以和`Chakram`一起使用。本质上讲，我们可以把`Chakram`看成一个API Testing的库，测试框架本质还是`Mocha`。

### 功能介绍  
#### HTTP specific assertion
`Chakram`提供API Testing中最常用的功能 - HTTP request和response验证。

`Chakram`使用[request library](https://github.com/request/request)作为请求处理的库，基于这个库(as a helper)提供了很多简单好用的方法来覆盖常用的HTTP request方法。

##### 发起请求 HTTP GET
`chakram.get(url, params)`发起了一个HTTP请求。返回值是一个由promise得来的[ChakramResponse](http://dareid.github.io/chakram/jsdoc/global.html#ChakramResponse)对象，这个对象封装了一次HTTP请求的结果。

##### 验证response
`Chakram`提供了很多验证response的方法，类似于`chai`，`Chakram`的`expect`接口提供了BDD风格的验证方法。我们只需要把response作为参数传给`chakram.expect`，然后接着使用`Chakram`提供的验证方法就可以了。还可以使用`Chai`提供的`chains getter`来提供可读性。一旦response被接受到了，验证就立即开始。

下面来看一个最简单的发出请求和验证response的例子

```js
var chakram = require('../node_modules/chakram/lib/chakram.js'),
    expect = chakram.expect;

const testURL = "https://api.douban.com/v2/movie/subject/26363254";

describe("I can get movie information from douban", function () {
  it("should have make HTTP assertions easy", function () {
    let response = chakram.get(testURL); //发送请求，得到response
    expect(response).to.have.status(200); //response作为参数，BDD式验证风格
    expect(response).to.comprise.of.json({  //验证json
      "year": "2017";
  });
    return chakram.wait();
  });
});
```
此外，`Chakram.expect`继承了`Chai`所有的属性和验证方法，可以任意使用。

##### Waiting


* 状态码验证 status code
* Cookie验证 Cookie presence and value
* Header验证 Header presence and value
* JSON结构和值的验证 JSON values and structure (JSON schema)
* Compression
* 相应时间 Response times

#### BDD式风格和hooks
#### promises
#### 支持插件
#### 自定义的验证assertion
#### 多种输出结果
#### 支持调试



####
