---
layout:     post
title:      如何在敏捷项目中快速地设计出高覆盖率的测试用例(in progress)
subtitle:   针对故事卡手工验收测试的设计
date:       2017-09-21 12:00:00
author:     DanteYu
tags:
    -TestDesign
---

在敏捷项目的快速迭代中，QA要负责和推动多个活动比如需求分析、过程改进、风险管理、自动化测试开发维护和故事卡验收测试等；其中留给故事卡验收测试的时间是有限甚至紧迫的，但是质量要求一点也不能放松。

那么如何在敏捷快速迭代交付的压力下快速地进行故事卡验收测试？由于故事卡验收测试的测试设计是最花精力和时间的，所以这个问题又可以进一步分解为下面两个子问题：
1. 如何快速的进行测试设计？
2. 如何设计出覆盖率高的测试用例？

我们在分析解答这两个问题之前，要强调一下进行测试设计的前提：

1. 对**产品(待测系统)业务逻辑**的充分了解 - *可以帮助QA从用户角度进行场景设计以及不遗漏任何改动相关的功能*
* 产品功能
* 产品平台
* 产品接口
* 产品数据流
* 产品操作
* 产品用户体验
2. 对**产品(待测系统)实现技术**的充分了解 - *可以帮助QA了解实现细节来减少测试范围*
* 产品类型
  * WEB
  * Mobile
  * 桌面软件
* 产品技术架构
* 产品技术栈

如果上面的前提都不满足的话，是很难设计出好的测试用例的。

现在我们来仔细分析上面提出的两个问题

##### 问题1： 如何快速的进行测试设计？

###### 舍弃传统测试设计方法，避免过渡设计，采用思维导图等方式进行粗粒度的快速设计
在传统的测试设计方法中，QA需要依据需求文档，进行对应功能的详细的用例设计数据设计；然后把测试用例录入到电子表格或是一些测试用例管理工具中比如Testlink，QC等。类似这样的工具都要求测试用例具有非常详细的信息比如测试环境、测试步骤、测试数据测试期待结果，于是QA会花大量的时间在测试用例的设计和编写录入上。

在敏捷项目中，我们提倡采用探索式测试来进行手工验收测试。探索式测试是一种基于反馈的，边设计边执行的测试方法，不会要求详细的脚本化的测试用例，只需要选定某种特殊的测试类型在产品上进行深入的探索。所以，QA们不会使用具体的测试用例管理工具去编写详细的测试用例，而是使用简单的工具(例如思维导图)记录简单的测试想法/测试功能点；在实际的测试执行过程中，会针对某一个测试想法进行探索式测试。

这些测试想法只需要描述清楚测试的功能点是什么，基本的用户场景和数据是什么就可以了。

比如对于To Do List这样的一个应用，可以有如下测试想法
* 测试想法1： 加入一个task，然后完成这个task
* 测试想法2： 加入多个tasks，然后一次性清空全部tasks
* 测试想法3： 加入多个tasks，然后删除某几个tasks
* 测试想法4： 使用filter过滤tasks list

在实际测试执行过程中在使用探索式测试(漫游测试)，比如拿上面测试想法来举例
* 测试想法1
  * 超模漫游： 测试系统界面
  * 反叛漫游： 系统会不会接受错误的task描述，比如为空的task，全是空格的task
  * 沙发土豆漫游： 有没有默认值？placeholder？
* 测试想法2
  * 找茬漫游： 能不能清空后再次在无task状态下清空
* 测试想法3
  * 快递漫游： 删除后tasks只是从前端删除还是从后端删除？涉及数据库不
* 测试想法4
  * 反叛漫游： 当没有适合条件的task的时候，filter之后的结果是什么，界面如何显示

可见采用测试想法思维导图和探索式测试将会有效的减少测试设计和执行时间。当然测试想法的记录不局限于思维导图，简单的word文档进行文本描述，excel文档进行表格描述都是可行的，只要符合"keep it simple or stupid"的原则即可。具体怎么设计测试想法和应用探索式测试，会在稍后提到。

###### "Shoulder Check"可以帮助QA确认代码改动影响范围从而变动测试范围

在敏捷项目中，当故事卡需要从开发状态转入测试状态时，开发和测试会在一起进行"Shoulder Check"，这个活动会让开发和测试一起'play'一下刚开发完的新功能(或是bug fix)。开发会给QA展示这个故事卡所有的代码改动和通过验收条件来展示最终效果，与此同时QA也会提出自己的任何疑问。通过回顾代码改动，QA可以评估和与开发确认代码的影响范围从而变动测试的范围，一般来讲，基本都能够减少测试范围避免没必要的手工回归测试。

##### 问题2： 如何设计出覆盖率高的测试用例？

由于现在产品业务逻辑日益复杂，迭代交付速度日益加快；按照需求来写测试用例，并加以等价类、边界值、因果图和判定表等测试用例设计方法已经不能满足当前对测试“快又准”要求。快速地进行粗粒度的测试设计并不等于忽略掉很多测试场景和数据，QA需要的是一种测试设计思路来指导具有高覆盖率的测试用例设计。

下面主要介绍我在日常工作中如何进行故事卡验收测试的设计和执行。在故事卡已经满足提测标准的前提下，整个测试设计和执行一共分为五轮：

1. 使用RST(Rapid Software Testing)进行基于缺陷模型的测试，目的是发现一些特定的常见错误。这一轮测试不会进行测试设计也不需要太多的产品知识。
2. 使用HTSM中的Test Techniques创建测试，目的是归纳出适用于故事卡的测试维度和覆盖到最基本的测试点。这一轮往后都需要结合产品和具体改动来做出判断
3. 使用各类测试建模方法创建指导测试设计的模型，目的是通过建立好的产品模型给每个测试维度加上丰富的测试想法
4. 使用探索式测试之漫游测试来扩展每个测试想法，目的也是给每个测试维度加上丰富的测试想法，也有可能会增加新的测试维度
5. 使用探索式测试之局部测试法执行各个测试想法，目的是在执行测试的同时扩展思路，创造更多的测试路劲，也会基于系统执行结果的反馈，不断优化测试想法

接下来我们深入的探讨下每轮测试实现的方式

######




    *   测试用例的思考之路   再谈测试设计  基本用例设计技能 执行前设计 RST ET HSTM  思考的维度 结合 ET 运行时设计    需求合理性的设计  自动化如何介入 - 测试用例的分层实现


        -#### 来自于局部探索式测试的思考思路
         -* Business value
         -* Input/output
         -* State Change
         -* Code Path
         -* User Data
         -* Execute Environment
         -
         -#### 我们可以从下面分类来思考我们的测试用例设计
         -1. Structure - code path
         -- Test what is made of
         -2. Functions
         -- Test what it does
         -3. Business value
         -- Value added to customer
         -- Dependency
         -- Do what we don’t want to
         -- Impact others
         -4. Platform - Execute environment
         -- Test what is depends on
         -5. Data - Different type of data
         -- Valid & invalid
         -- Volume
         -- Test what is input and output
         -6. Interfaces
         - - Test the ways we can interact with
         -        - With human
         -        - With program
         -7. State
         -- Test it’s different status
         -        - Persistence
         -        - Consistence





参考资料
           软件测试实战
           测试架构师
           HTSM
           RST
           ET
