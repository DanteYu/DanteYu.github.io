---
layout:     post
title:      如何在敏捷项目中快速地设计出高覆盖率的测试用例(in progress)
subtitle:   针对故事卡手工验收测试的设计
date:       2017-09-21 12:00:00
author:     DanteYu
tags:
    -TestDesign
---

在敏捷项目的快速迭代中，QA要负责和推动多个活动比如需求分析、过程改进、风险管理、自动化测试开发维护和故事卡验收测试等；其中留给故事卡验收测试的时间是有限甚至紧迫的，但是质量要求一点也不能放松。

那么如何在敏捷快速迭代交付的压力下快速地进行故事卡验收测试？由于故事卡验收测试的测试设计是最花精力和时间的，所以这个问题又可以进一步分解为下面两个子问题：
1. 如何快速的进行测试设计？
2. 如何设计出覆盖率高的测试用例？

我们在分析解答这两个问题之前，要强调一下进行测试设计的前提：

1. 对**产品(待测系统)业务逻辑**的充分了解 - *可以帮助QA从用户角度进行场景设计以及不遗漏任何改动相关的功能*
* 产品功能
* 产品平台
* 产品接口
* 产品数据流
* 产品操作
* 产品用户体验
2. 对**产品(待测系统)实现技术**的充分了解 - *可以帮助QA了解实现细节来减少测试范围*
* 产品类型
  * WEB
  * Mobile
  * 桌面软件
* 产品技术架构
* 产品技术栈

如果上面的前提都不满足的话，是很难设计出好的测试用例的。

现在我们来仔细分析上面提出的两个问题

#### 问题1： 如何快速的进行测试设计？

##### 舍弃传统测试设计方法，避免过渡设计，采用思维导图等方式进行粗粒度的快速设计
在传统的测试设计方法中，QA需要依据需求文档，进行对应功能的详细的用例设计数据设计；然后把测试用例录入到电子表格或是一些测试用例管理工具中比如Testlink，QC等。类似这样的工具都要求测试用例具有非常详细的信息比如测试环境、测试步骤、测试数据测试期待结果，于是QA会花大量的时间在测试用例的设计和编写录入上。

在敏捷项目中，我们提倡采用探索式测试来进行手工验收测试。探索式测试是一种基于反馈的，边设计边执行的测试方法，不会要求详细的脚本化的测试用例，只需要选定某种特殊的测试类型在产品上进行深入的探索。所以，QA们不会使用具体的测试用例管理工具去编写详细的测试用例，而是使用简单的工具(例如思维导图)记录简单的测试想法/测试功能点；在实际的测试执行过程中，会针对某一个测试想法进行探索式测试。

这些测试想法只需要描述清楚测试的功能点是什么，基本的用户场景和数据是什么就可以了。

比如对于To Do List这样的一个应用，QA不需要去设计编写繁琐的test case/step,只需要写出类似下面的测试想法
* 测试想法1： 加入一个task，然后完成这个task
* 测试想法2： 加入多个tasks，然后一次性清空全部tasks
* 测试想法3： 加入多个tasks，然后删除某几个tasks
* 测试想法4： 使用filter过滤tasks list

在实际测试执行过程中在使用探索式测试(漫游测试)，比如拿上面测试想法来举例
* 测试想法1
  * 超模漫游： 测试系统界面
  * 反叛漫游： 系统会不会接受错误的task描述，比如为空的task，全是空格的task
  * 沙发土豆漫游： 有没有默认值？placeholder？
* 测试想法2
  * 找茬漫游： 能不能清空后再次在无task状态下清空
* 测试想法3
  * 快递漫游： 删除后tasks只是从前端删除还是从后端删除？涉及数据库不
* 测试想法4
  * 反叛漫游： 当没有适合条件的task的时候，filter之后的结果是什么，界面如何显示

可见采用测试想法思维导图和探索式测试将会有效的减少测试设计和执行时间。当然测试想法的记录不局限于思维导图，简单的word文档进行文本描述，excel文档进行表格描述都是可行的，只要符合"keep it simple or stupid"的原则即可。具体怎么设计测试想法和应用探索式测试，会在稍后提到。

##### "Shoulder Check"可以帮助QA确认代码改动影响范围从而变动测试范围

在敏捷项目中，当故事卡需要从开发状态转入测试状态时，开发和测试会在一起进行"Shoulder Check"，这个活动会让开发和测试一起'play'一下刚开发完的新功能(或是bug fix)。开发会给QA展示这个故事卡所有的代码改动和通过验收条件来展示最终效果，与此同时QA也会提出自己的任何疑问。通过回顾代码改动，QA可以评估和与开发确认代码的影响范围从而变动测试的范围，一般来讲，基本都能够减少测试范围避免没必要的手工回归测试。

#### 问题2： 如何设计出覆盖率高的测试用例？

由于现在产品业务逻辑日益复杂，迭代交付速度日益加快；按照需求来写测试用例，并加以等价类、边界值、因果图和判定表等测试用例设计方法已经不能满足当前对测试“快又准”要求。快速地进行粗粒度的测试设计并不等于忽略掉很多测试场景和数据，QA需要的是一种测试设计思路来指导具有高覆盖率的测试用例设计。

下面主要介绍我在日常工作中如何进行故事卡验收测试的设计和执行。在故事卡已经满足提测标准的前提下，整个测试设计和执行一共分为五轮：

1. 使用RST(Rapid Software Testing)进行基于风险或缺陷模型的测试，目的是快速发现一些典型缺陷。
2. 使用HTSM中的Test Techniques创建测试，目的是归纳出适用于故事卡的测试维度和覆盖到最基本的测试点。这一轮往后都需要结合产品和具体改动来做出判断
3. 使用各类测试建模方法创建指导测试设计的模型，目的是通过建立好的产品模型给每个测试维度加上丰富的测试想法
4. 使用探索式测试之漫游测试来扩展每个测试想法，目的也是给每个测试维度加上丰富的测试想法，也有可能会增加新的测试维度
5. 使用探索式测试之局部测试法执行各个测试想法，目的是在执行测试的同时扩展思路，创造更多的测试路劲，也会基于系统执行结果的反馈，不断优化测试想法

接下来我们深入的探讨下每轮测试实现的方式

##### 第一轮： 基于RST的测试设计和执行

快速测试RST(Rapid Software Testing)是技能和思维模式，通过一种快速，低投入，可行和可靠的方式来做更加有效的测试。具体做法是针对某些常见的风险或缺陷模型进行专项深度测试。RST能够帮助QA在短时间内发现一些特定类型的缺陷，这些错误可以是需求设计上的业务逻辑错误，也可以是平时测试中经常遇到的缺陷。

因为RST只是针对一些特定的软件缺陷进行，所以这一轮测试不会进行太多的测试设计也不要求QA具备丰富的产品知识。

典型的测试方法有

| 方法名  | 所针对风险 | 测试手段  |
| ------------- | ------------- | ------------- |
| 快乐路径  | 软件在典型用户情景中失败  | 测试人员测试产品最简单、最直观、最典型的情景，完成一项或多项用户任务。在此过程中，检查其表现是否符合用户和产品团队对它的期望，而不会让用户感到疑惑、恼怒、挫折等负面情绪  |
| 挖墙脚  | 软件不能正确处理一些异常情况  | 测试人员启动一项软件操作，然后破坏该操作所依赖的资源，例如删除它要访问的文件、关闭它将访问的网络服务、启动另一个程序去锁住它要修改的数据库表格等。软件应该妥善地处理这些异常，合理地报告所遭遇的问题，不导致严重的故障  |
| 狗刨  | 当某些操作被反复执行时，软件可能出错  | 测试人员将一组操作重复多次，用并发的流程、嵌套的结构去考验软件。例如，文本编辑软件支持嵌套文本框，于是测试人员就不断在文本框加入新文本框，以增加嵌套层次。当文本框嵌套层次达到上限时，操作这组文本框有可能发现隐藏的缺陷  |
| 功能交互  | 不同的功能可能由不同的程序员(或同一个程序员在不同时间)编写，它们的逻辑可能不一致  | 测试人员发现相互调用或共享数据的一组功能，然后用夸张的数据或操作来压迫它们，以暴露交互中存在的问题  |

QA这一轮中通过已有的产品缺陷模型和故事卡改动可能会引起的缺陷会快速的找到一些典型的缺陷。如果还没有产品缺陷模型，那就赶快归纳总结出产品发生过的缺陷和发现手段。

##### 第二轮： 基于HTSM的测试设计

HTSM中提供了九大测试技术，这九大测试技术用来启发创建测试。

下面列出了九种通用的测试技术。“通用的测试技术”是指技术是简单明了的且可以脱离复杂的上下文普遍适用的。很多特殊的技术都可以基于下面九种测试技术中一种或是多种。通过组合通用技术和本模型中其他的元素，我们能够得到很多特殊的测试技术。

* **功能测试 Function Testing**
	* 描述：测试软件的能力。Test what it can do
	* 典型思路
		* 辨识产品能做的事情
		* 决定你怎么知道产品能工作
		* 一次只测试一个功能
		* 测试每个功能只做了它应该做的事情而没有做它不应该做的事情

* **域测试 Domain Testing**
	* 描述： 专注于测试软件所处理的数据 divide and conquer the data
	* 典型思路
		* 找到产品处理的所有数据。看输出也看输入
		* 决定哪些特殊的数据需要测试。考虑边界值、典型值、无效值和最佳代表数据
		* 考虑数据的组合

* **压力测试 Stress Testing**
	* 描述：用极限行为和数据压迫软件。overwhelm the product
	* 典型思路
		* 寻找极易遭受挑战性数据和被限制的资源破坏的子系统或是功能
		* 选择或创建有挑战性的数据或者资源限制条件进行测试。比如庞大或是复杂的数据结构，高负荷，持久测试，大规模测试用例和低内存条件

* **流测试 Flow Testing**
	* 描述： 测试软件的操作顺序。Do one thing after another
	* 典型思路
		* 测试多个活动串联以后端到端的流程。比如在状态模型中开展漫游测试
		* 不要在活动中重设系统
		* 改变时间线和顺序，试试并发

* **情景测试 Scenario Testing**
	* 描述： 用有说服力的场景来测试软件。Test to a compelling story
	* 典型思路
		* 开始时思考关于产品的一切
		* 设计测试来覆盖与产品有意义的和复杂的互动
		* 一个好的场景测试是一个引人注目的故事，这个故事涉及谁做了什么影响产品的事情

* **声明测试 Claims Testing**
	* 描述： Challenge every claim
	* 典型思路
		* 调查所有的声明，澄清所有的声明
		* 鉴别所有关于产品的参考资料
		* 测试关于产品声明的精准性

* **用户测试 User Testing**
	* 描述：Involve the users
	* 典型思路
		* 识别用户的角色分类
		* 识别每一类的用户分别会做什么事情，怎么做以及带来的用户价值是什么
		* 获取真实的用户数据来进行测试
		* 否则，系统性地模拟一个用户(这里有一个坑，就是你很容易自以为你就是真实的用户，而不是你并不是)
		* 强有力的用户测试通常都会涉及多个不同类别的用户和不同的角色，并不是某一个

* **风险测试 Risk Testing**
	* 描述：Imagine a problem, then look for it
	* 典型思路
		* 这个产品可能会有什么样的问题
		* 哪些问题最有严重或是最有可能性发生？先聚焦在这些问题
		* 如果这些问题有可能发生，应该怎么去发现他们？
		* 列出一个包含一些有趣问题的列表，然后设计测试去揭露他们
		* 这个测试能帮助咨询专家，设计文档，历史缺陷报告或者启发风险

* **自动化检查 Automatic Checking**
	* 描述：Check a million different facts
	* 典型思路
		* 寻求或开发工具来做大量操作和检查大量结果
		* 考虑能部分自动化测试覆盖率的工具
		* 考虑能部分自动化测试先知的工具
		* 考虑能够自动化感知变更的检测器
		* 考虑能够自动化产生数据的创造器
		* 考虑能够帮助人工测试的工具

QA在这一轮需要考虑九种技术里面哪些适用于当前的故事卡，把适合的测试技术与故事卡的变动联系起来，确定了针对本次改动的大致测试范围。上面提到这九种技术是非常通用的，如果发现故事卡有改动不能被这九种技术覆盖掉，那QA需要考虑自己“创造”一种测试技术来覆盖需求。此轮测试相比于RST，这一轮测试会涉及更多业务领域知识，最基本的业务功能都会在此轮测试中被覆盖到。

#### 基于测试建模的测试设计

测试建模是以**指导测试设计**为目的建立**产品模型**，此产品模型就是测试建模的产出。这个产品模型包含着大量测试需要关注的信息。

QA常使用的测试建模手段有哪些呢？

1.组合测试
* 组合测试(combinatorial testing)是一种测试用例生成方法。测试人员将被测试对象抽象成一个受到多个变量影响的系统，其中每个变量的取值是离散且有限的。
  * 两因素组合测试(pairwise combinatorial testing，配对测试，全对偶测试) 生成的测试集可以覆盖任意两个变量的所有取值组合。在理论上，该用例集可以暴露所有的两个变量共同作用而引发的缺陷
  * 多因素组合测试(n-way combinatorial testing) 生成的测试集可以覆盖任意n个变量的所有取值组合。在理论上，该测试用例集可以发现所有由n个因素共同作用引发的缺陷
* 常用工具：[PICT](https://github.com/Microsoft/pict)生成满足特定组合覆盖标准的组合测试用例集
* 更多[工具集](http://www.pairwise.org/tools.asp)

2.输入输出模型/IO模型
* 输入输出模型是最基本的测试模型，这个模型列举了被测对象所有的输入变量和输出变量，然后定义了输入输出的关系。

3.状态机模型
* 分析识别出被测对象所有的状态以及状态之间进行变迁的触发事件，这样我们可以得到一个状态图
* 通过分析状态图，QA可以设计测试用例覆盖所有状态、所有状态变迁和所有触发事件
* 也可以把状态图转变为状态表

4.功能列表
  * 用列表的方式列出产品的主要功能和子功能

QA在这一轮测试中需要观察上轮中得到的测试想法可否使用测试建模技术来细化；如果可以细化，那QA可以得到更多的测试想法和更加精确的测试数据。

#### 基于探索式测试之漫游测试的测试设计

探索式测试用于帮我们在测试设计中开发出测试用例，它也可以帮助我们发现在规范说明书中可能漏掉的用户场景，还可以组织测试人员的测试思路.

漫游测试提供的方法太多，这里列出一些最常见的方法。因为这一轮测试是基于上几轮测试的结果，所以我们使用HTSM的九种技术来展示漫游测试方法可以发挥巨大作用的地方

    *   测试用例的思考之路   再谈测试设计  基本用例设计技能 执行前设计 RST ET HSTM  思考的维度 结合 ET 运行时设计    需求合理性的设计  自动化如何介入 - 测试用例的分层实现


        -#### 来自于局部探索式测试的思考思路
         -* Business value
         -* Input/output
         -* State Change
         -* Code Path
         -* User Data
         -* Execute Environment
         -
         -#### 我们可以从下面分类来思考我们的测试用例设计
         -1. Structure - code path
         -- Test what is made of
         -2. Functions
         -- Test what it does
         -3. Business value
         -- Value added to customer
         -- Dependency
         -- Do what we don’t want to
         -- Impact others
         -4. Platform - Execute environment
         -- Test what is depends on
         -5. Data - Different type of data
         -- Valid & invalid
         -- Volume
         -- Test what is input and output
         -6. Interfaces
         - - Test the ways we can interact with
         -        - With human
         -        - With program
         -7. State
         -- Test it’s different status
         -        - Persistence
         -        - Consistence



#### 总结

通过改变测试设计方法和精准定位代码变动影响范围，QA可以减少大量测试设计和执行时间。通过五轮不同目的的测试，QA考虑到了一次故事卡变动影响的方方面面，每一轮测试有其独特的使命，只有把所有可行的测试方法都组合起来使用，才能设计出高覆盖率的测试用例。


#### 参考资料
           软件测试实战
           测试架构师
           HTSM
           RST
           ET
